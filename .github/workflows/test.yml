name: Test

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        platform: [windows-latest,ubuntu-latest,macos-latest]
        node: ["10","12","13","14"]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo1073325810292-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Install llvm
        if: matrix.platform=='windows-latest'
        run: choco install -y llvm
      - name: set environment variables
        if: matrix.platform=='windows-latest'
        uses: allenevans/set-env@v1.0.0
        with:
          LIBCLANG_PATH: 'C:\Program Files\LLVM\bin'
      - name: Build
        run: cargo build
        working-directory: native
      - name: Copy artifacts Linux
        if: matrix.platform=='ubuntu-latest'
        run: cp ./native/target/debug/libimageflow_node.so ./native/index.node
      - name: Copy artifacts macos
        if: matrix.platform=='macos-latest'
        run: cp ./native/target/debug/libimageflow_node.dylib ./native/index.node
      - name: Copy artifacts windows
        if: matrix.platform=='windows-latest'
        run: cp ./native/target/debug/imageflow_node.dll ./native/index.node
        shell: bash
      - name: Copy artifacts windows
        if: matrix.platform=='windows-latest'
        run: ls ./native/target/debug
        shell: bash
      - name: Test
        run: |
          yarn
          yarn test
